buildscript {
  ext {
    kotlin_version = '1.1.4-2'
    vertx_version = '3.4.2'
    gradleDockerVersion = '1.2'
    technogiDockerGroup = 'technogi'
    technogiBaseImage = "openjdk:8-jdk-alpine"
  }

  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
  }
}

plugins {
  id 'java'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'kotlin'
apply plugin: 'docker'

apply from: 'gradle/docker.gradle'

group 'com.technogi.microservices'
version = '0.0.4'
sourceCompatibility = '1.8'

mainClassName = 'io.vertx.core.Launcher'

def mainVerticleName = 'com.technogi.microservices.mxpostalcodes.HttpServer'

repositories {
  jcenter()
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
  compile "io.vertx:vertx-core:${vertx_version}"
  compile "io.vertx:vertx-web:${vertx_version}"
  compile "io.vertx:vertx-consul-client:${vertx_version}"
  compile "io.vertx:vertx-health-check:${vertx_version}"

}

compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
  kotlinOptions.jvmTarget = "1.8"
}


run {
  args = ['run', mainVerticleName,
          "--launcher-class=$mainClassName",
          "--redeploy=src/**/*.*",
          "--on-redeploy=./gradlew classes",
          "-conf 'conf/conf.json'"
  ]
}

shadowJar {
  baseName = 'mx-postal-codes'
  classifier = 'shadow'

  manifest {
    attributes 'Main-Verticle': mainVerticleName
  }
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

// Heroku relies on the 'stage' task to deploy.
task stage {
  dependsOn shadowJar
}

//bootBuildInfo.mustRunAfter cleanResources

task('increment') {
  doLast {
    def v = buildFile.getText().find(version) //get this build file's text and extract the version value
    String minor = v.substring(v.lastIndexOf('.') + 1)
    int m = 1 + minor.toInteger()
    String major = v.substring(0, v.length() - minor.size())
    String s = buildFile.getText().replaceFirst("version = '$version'", "version = '" + major + m + "'")
    buildFile.setText(s)
  }
}

task release(type: Exec) {

  //commandLine = "git add --all"
  commandLine = ['sh', '-c', "git add --all && git commit -am ${version} && git tag -a '${version}' -m 'Version $version'"]

  //ext.output = {
  //    println(standardOutput.toString())
  //    return standardOutput.toString()
  //}
}

release.dependsOn('clean','increment', 'build')
